<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>
	<groupId>com.coladay</groupId>
	<artifactId>coladay</artifactId>
	<!-- We do not care anymore, the jav version is calculated bj Jgitver maven plugin based on
	 git tag -->
	<version>1.2.0-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>coladay</name>
	<description>COLADAY Project</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.7</version>
		<relativePath/>
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>11</java.version>
		<jib.maven.plugin>2.0.0</jib.maven.plugin>
		<checkstyle.config.location>google_checks.xml</checkstyle.config.location>
		<spring.restdocs.version>2.0.5.RELEASE</spring.restdocs.version>
		<testcontainers.version>1.16.3</testcontainers.version>
		<!-- Test coverage -->
		<jacoco.output.folder>${project.build.directory}/coverage-reports</jacoco.output.folder>
		<jacoco.it.execution.data.file>${jacoco.output.folder}/jacoco-it.exec</jacoco.it.execution.data.file>
		<jacoco.ut.execution.data.file>${jacoco.output.folder}/jacoco-ut.exec</jacoco.ut.execution.data.file>
		<jacoco.merged.execution.data.file>${jacoco.output.folder}/jacoco-merged.exec</jacoco.merged.execution.data.file>
		<!-- Sonarcloud configuration -->
		<sonar.projectKey>selimyanat_cola-day</sonar.projectKey>
		<sonar.organization>selimyanat</sonar.organization>
		<sonar.host.url>https://sonarcloud.io</sonar.host.url>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis>
		<sonar.coverage.jacoco.xmlReportPaths>
			${project.reporting.outputDirectory}/jacoco-merged-report/jacoco.xml
		</sonar.coverage.jacoco.xmlReportPaths>
		<sonar.coverage.exclusions>
			src/main/java/com/sy/coladay/Bootstrap.java,
			src/main/java/com/sy/coladay/init/*,
			src/main/java/com/sy/coladay/company/Companies.java,
			src/main/java/com/sy/coladay/user/Role.java
		</sonar.coverage.exclusions>
	</properties>

	<distributionManagement>
		<repository>
			<id>github</id>
			<name>Cola-day</name>
			<url>https://maven.pkg.github.com/selimyanat/cola-day</url>
		</repository>
	</distributionManagement>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-rest</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
		</dependency>
		<dependency>
			<groupId>org.postgresql</groupId>
			<artifactId>postgresql</artifactId>
		</dependency>
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
		</dependency>
		<dependency>
			<groupId>io.vavr</groupId>
			<artifactId>vavr</artifactId>
			<version>0.10.4</version>
		</dependency>
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
		</dependency>

		<!-- TEST -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.restdocs</groupId>
			<artifactId>spring-restdocs-mockmvc</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-junit-jupiter</artifactId>
			<version>2.22.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-params</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.vmlens</groupId>
			<artifactId>concurrent-junit</artifactId>
			<version>1.0.2</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>postgresql</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.0</version>
				<configuration>
					<argLine>${surefireArgLine}</argLine>
					<excludes>
						<exclude>**/*IT.java</exclude>
					</excludes>
				</configuration>
			</plugin>
			<!-- Execute integration tests for files with IT extension. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.22.0</version>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<includes>
								<include>**/*IT.java</include>
							</includes>
							<!-- Sets the VM argument line used when integration tests are run. -->
							<argLine>${failsafeArgLine}</argLine>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>3.1.2</version>
				<executions>
					<execution>
						<id>validate</id>
						<phase>validate</phase>
						<configuration>
							<!-- google_check ruleset enforced with the environment variable
							-Dcheckstyle.config.location=google_checks.xml. See the properties
							section at the beginning of the pom.xml
							-->
							<encoding>UTF-8</encoding>
							<includeTestSourceDirectory>true</includeTestSourceDirectory>
							<consoleOutput>true</consoleOutput>
							<failsOnError>true</failsOnError>
							<failOnViolation>true</failOnViolation>
							<violationSeverity>warning</violationSeverity>
							<suppressionsLocation>${project.basedir}/checkstyle/checkstyle-suppressions.xml</suppressionsLocation>
						</configuration>
						<goals>
							<goal>check</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Git hooks: The maven-resources-plugin copies the hooks from a git-hooks source
			directory to the .git/hooks destination folder.
			After that, calling the command mvn validate or any other maven command that
			calls validate, like package, will install the hooks in the first place. Credit to
			https://blog.mimacom.com/adding-git-hooks/
			-->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>copy-hooks</id>
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/.git/hooks</outputDirectory>
							<resources>
								<resource>
									<directory>git-hooks</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Live documentation -->
			<plugin>
				<groupId>org.asciidoctor</groupId>
				<artifactId>asciidoctor-maven-plugin</artifactId>
				<version>2.2.2</version>
				<executions>
					<execution>
						<id>generate-docs</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>process-asciidoc</goal>
						</goals>
						<configuration>
							<backend>html</backend>
							<doctype>book</doctype>
							<logHandler>
								<outputToConsole>true</outputToConsole>
								<failIf>
									<severity>DEBUG</severity>
								</failIf>
							</logHandler>
						</configuration>
					</execution>
				</executions>
				<dependencies>
					<dependency>
						<groupId>org.springframework.restdocs</groupId>
						<artifactId>spring-restdocs-asciidoctor</artifactId>
						<version>2.0.5.RELEASE</version>
					</dependency>
				</dependencies>
			</plugin>
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-resources</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.outputDirectory}/static/docs</outputDirectory>
							<resources>
								<resource>
									<directory>${project.build.directory}/generated-docs</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<!-- Jacoco code coverage -->
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.8</version>
				<configuration>
					<excludes>
						<!-- Do not forget to update the property <sonar.coverage.exclusions> at the start of
						the pom.xml. Otherwise, Sonar will not ignore these files from the coverage reporting
						-->
						<exclude>com/sy/coladay/Bootstrap*</exclude>
						<exclude>com/sy/coladay/init/*</exclude>
						<exclude>com/sy/coladay/company/Companies*</exclude>
						<exclude>com/sy/coladay/user/Role*</exclude>
					</excludes>
				</configuration>
				<!-- Credit to https://github.com/pkainulainen/maven-examples/blob/master/code-coverage-jacoco/pom.xml
				 , https://natritmeyer.com/howto/reporting-aggregated-unit-and-integration-test-coverage
				 -with-jacoco/ and https://blog.qaware.de/posts/sonarqube-and-jacoco/
				-->
				<executions>
					<!--
              Prepares the property pointing to the JaCoCo runtime agent which
              is passed as VM argument when Maven the Surefire plugin is executed.
          -->
					<execution>
						<id>before-unit-test-execution</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.ut.execution.data.file}</destFile>
							<!--
								Sets the name of the property containing the settings
								for JaCoCo runtime agent.
							-->
							<propertyName>surefireArgLine</propertyName>
						</configuration>
					</execution>
					<!--
							Ensures that the code coverage report for unit tests is created after
							unit tests have been run.
          -->
					<execution>
						<id>after-unit-test-execution</id>
						<phase>test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.ut.execution.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
						</configuration>
					</execution>
					<!--
              Prepares the property pointing to the JaCoCo runtime agent which
              is passed as VM argument when Maven the Failsafe plugin is executed.
          -->
					<execution>
						<id>before-integration-test-execution</id>
						<phase>pre-integration-test</phase>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<destFile>${jacoco.it.execution.data.file}</destFile>
							<!--
                  Sets the name of the property containing the settings
                  for JaCoCo runtime agent.
              -->
							<propertyName>failsafeArgLine</propertyName>
						</configuration>
					</execution>
					<execution>
						<id>after-integration-test-execution</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the execution data. -->
							<dataFile>${jacoco.it.execution.data.file}</dataFile>
							<!-- Sets the output directory for the code coverage report. -->
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
						</configuration>
					</execution>
					<execution>
						<id>merge-unit-and-integration</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>merge</goal>
						</goals>
						<configuration>
							<fileSets>
								<fileSet>
									<!-- Sets the path to the files which contain the execution data. Don't remove
									the / at the end of directory name, otherwise Jacoco will not resolve the
									location and skip the merge step. !!!-->
									<directory>${jacoco.output.folder}/</directory>
									<includes>
										<include>*.exec</include>
									</includes>
								</fileSet>
							</fileSets>
							<!-- Sets the path to the file which contains the merged execution data. -->
							<destFile>${jacoco.merged.execution.data.file}</destFile>
						</configuration>
					</execution>
					<execution>
						<id>create-merged-report</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>report</goal>
						</goals>
						<configuration>
							<!-- Sets the path to the file which contains the merged execution data. -->
							<dataFile>${jacoco.merged.execution.data.file}</dataFile>
							<outputDirectory>${project.reporting.outputDirectory}/jacoco-merged-report</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.sonarsource.scanner.maven</groupId>
				<artifactId>sonar-maven-plugin</artifactId>
				<version>3.9.1.2184</version>
			</plugin>
		</plugins>
	</build>


</project>
